/*
 * Copyright 2018 Martin Åberg
 *
 * This file is part of Footag.
 *
 * Footag is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Footag is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef FOOTAG_IPC7351B_H
#define FOOTAG_IPC7351B_H

/*
 * This is an implementation of
 *   "IPC-7351B: Generic Requirements for Surface Mount Design and
 *   Land Pattern Standard"
 *
 * The document is available for purchase from IPC.
 *
 * The following parts of the standard are covered by the implementation:
 *   - Land pattern dimension and spacing calculations
 *   - Courtyard properties
 *
 * These parts are not implemented:
 *   - Land pattern naming convention
 * 
 * Note also that the following items are not part of IPC-7351B or this
 * implementation:
 *   - Silk screen
 *   - Assembly outline
 *
 * This implementation uses metric mm units exclusively.
 */

/*
 * The following lead dimensions convention is used in IPC-7351B. It applies to
 * different lead types.
 *
 *    | -------- l -------- |
 * _   _______       _______
 *    |       |     |       |
 * w  |       |     |       |  -
 * _  |_______|     |_______|  |
 *
 *                           pitch
 * _   _______       _______
 *    |       |     |       |  |
 * w  |       |     |       |  -
 * _  |_______|     |_______|
 *
 *    | - t - |
 */
struct ipcb_comp {
        /* lead termination end to lead termination end */
        double lmin, lmax;
        /* lead length */
        double tmin, tmax;
        /* width of lead or termination */
        double wmin, wmax;
        /* spacing between leads or castellations */
        double pitch;
};

/* Lead types are somewhat related to solder joint goal tables. */
enum ipcb_leadtype {
        IPCB_LEADTYPE_CHIP,
        IPCB_LEADTYPE_MOLDED,
        IPCB_LEADTYPE_GULLWING,
        IPCB_LEADTYPE_SIDECONCAVE,
        IPCB_LEADTYPE_NUM,
};

/*
 * - Density level {A,B,C} (Land pattern geometry variation)
 * or if you prefer:
 * - {Maximum (Most),Median (Nominal),Minimum (Least)} {Land
 *   protrusion,material condition}
 *
 * (IPC-7351B serves up a delicate smörgåsbord of vagule defined terms
 * potentially referring to the same thing, but you don't really know. For
 * example Section 1.4.)
 */
enum ipcb_density {
        IPCB_DENSITY_M,
        IPCB_DENSITY_N,
        IPCB_DENSITY_L,
        IPCB_DENSITY_NUM,
};

static const char IPCB_DENSITY_TO_CHAR[IPCB_DENSITY_NUM] = {'M','N','L'};

/* Attributes related to library policy. These are component independent. */
struct ipcb_attr {
        enum ipcb_density density;
        /* PCB fabrication tolerance */
        double f;
        /* Part placement tolerance */
        double p;
};

/* Output parameters generated by land dimension calculation functions. */
/* "Two-side" style */
struct ipcb_twospec {
        const char *ref;
        const char *desc;
        double zmax, gmin, xmax;
        double round;
        double cyexc;
};

/* BGA style */
struct ipcb_bgaspec {
        const char *ref;
        const char *desc;
        enum ipcb_density density;
        double diam;
        double round;
        double cyexc;
};

/*
 * Calculate land dimensions for two-side style
 *
 * leadtype:    lead type
 * comp:        component dimensions
 * attr:        library policy attributes
 * spec:        result
 * return:      0 iff success
 */
int ipcb_get_two(
        enum ipcb_leadtype leadtype,
        const struct ipcb_comp *comp,
        const struct ipcb_attr *attr,
        struct ipcb_twospec *spec
);

/*
 * Calculate land dimensions for BGA style
 *
 * diam:        ball diameter
 * spec:        result
 * return:      0 iff success
 */
int ipcb_get_bga(
        double diam,
        struct ipcb_bgaspec *spec
);

#endif

